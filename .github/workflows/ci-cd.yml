name: Terraform Apply or Destroy Modules

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Choose whether to apply or destroy the infrastructure'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy

permissions:
  id-token: write
  contents: read

env:
  aws_region: us-west-2
  image_tag: latest
  repo_name: eksdemo

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.aws_region }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply ECR Module
        if: ${{ github.event.inputs.action == 'apply' }}
        run: |
          set -e
          terraform init
          terraform apply -target=module.ecr -auto-approve

      - name: Build, Tag and Push Docker Image
        if: ${{ github.event.inputs.action == 'apply' }}
        run: |
          set -e
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          aws ecr get-login-password --region ${{ env.aws_region }} | docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.${{ env.aws_region }}.amazonaws.com
          docker build -t ${{ env.repo_name }}:${{ env.image_tag }} ./flask-app
          docker tag eksdemo:latest $ACCOUNT_ID.dkr.ecr.us-west-2.amazonaws.com/eksdemo:latest
          docker push $ACCOUNT_ID.dkr.ecr.us-west-2.amazonaws.com/eksdemo:latest

      - name: Terraform Apply Remaining Modules
        if: ${{ github.event.inputs.action == 'apply' }}
        run: |
          set -e
          if ! terraform apply -auto-approve; then
            echo "‚ùå Terraform apply failed. Destroying all modules in reverse order..."
            terraform destroy -target=module.helm -auto-approve || echo "Helm destroy failed"
            terraform destroy -target=module.eks -auto-approve || echo "EKS destroy failed"
            terraform destroy -target=module.vpc -auto-approve || echo "VPC destroy failed"
            terraform destroy -target=module.ecr -auto-approve || echo "ECR destroy failed"
            exit 1
          fi

      - name: Cleanup ALB Security Groups
        if: ${{ github.event.inputs.action == 'destroy' }}
        run: |
          set -e
          echo "üîé Looking for ALB Security Groups created by Ingress..."
          SG_IDS=$(aws ec2 describe-security-groups \
            --filters Name=group-name,Values="k8s-*" \
            --query 'SecurityGroups[].GroupId' \
            --output text)

          for sg in $SG_IDS; do
            echo "üóë Deleting ALB Security Group $sg ..."
            aws ec2 delete-security-group --group-id $sg || echo "Failed to delete $sg"
          done

      - name: Terraform Destroy All Modules
        if: ${{ github.event.inputs.action == 'destroy' }}
        run: |
          set -e
          echo "üõë Destroying modules in reverse dependency order..."
          terraform destroy -target=module.helm -auto-approve || echo "Helm destroy failed"
          terraform destroy -target=module.eks -auto-approve || echo "EKS destroy failed"
          terraform destroy -target=module.vpc -auto-approve || echo "VPC destroy failed"
          terraform destroy -target=module.ecr -auto-approve || echo "ECR destroy failed"
          echo "‚úÖ All specified modules destroyed"
